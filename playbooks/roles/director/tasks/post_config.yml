- name: adding overcloud images to OSPD
  become: yes
  become_user: stack
  shell: source /home/stack/stackrc && openstack overcloud image upload
  args:
    chdir: /home/stack/images
  tags: configure

- name: unset dns on ctlplane subnet
  become: yes
  become_user: stack
  shell: source /home/stack/stackrc && openstack subnet set --no-dns-nameservers ctlplane-subnet
  when: versions.rhosp >= 13
  tags: configure

- name: adding dns to ctlplane subnet
  become: yes
  become_user: stack
  shell: source /home/stack/stackrc && openstack subnet set --dns-nameserver {{ dns_server_local }} $(openstack subnet list | awk '/{{ networks.provisioning.cidr | ipaddr('network') }}/ {print $2}')
  ignore_errors: true
  tags: configure

- name: set mtu to 1500 on ctlplane network
  become: yes
  become_user: stack
  shell: "source /home/stack/stackrc && openstack network set --mtu 1500 ctlplane"
  args:
    chdir: /home/stack
  when: versions.rhosp >= 13
  tags: configure

- name: configuring fernet tokens for overcloud
  become: yes
  become_user: stack
  shell: source /home/stack/stackrc && sudo keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone && sudo tar -zcf /home/stack/keystone-fernet-keys.tar.gz /etc/keystone/fernet-keys && upload-swift-artifacts -f /home/stack/keystone-fernet-keys.tar.gz
  when: versions.rhosp == 10
  tags: configure

- name: set debug flag to false in DEFAULT section
  ini_file:
    dest: "{{ item }}"
    section: DEFAULT
    option: debug
    value: false
    backup: no
  with_items:
    - '/etc/nova/nova.conf'
    - '/etc/neutron/neutron.conf'
    - '/etc/heat/heat.conf'
    - '/etc/ironic/ironic.conf'
  tags: configure

- name: fix ceilometer database ttls
  ini_file:
    dest: /etc/ceilometer/ceilometer.conf
    section: database
    option: "{{ item }}"
    value: 259200
    backup: no
  with_items:
    - 'metering_time_to_live'
    - 'event_time_to_live'
  tags: configure

- name: Change dhcp_domain in nova.conf
  lineinfile:
    dest: /etc/nova/nova.conf
    regexp: '^dhcp_domain='
    line: "dhcp_domain={{ domain }}"
  when: versions.rhosp == 10
  tags: configure

- name: restart openstack services
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - 'openstack-*'
    - 'neutron-*'
    - 'httpd'
  when: versions.rhosp <= 13
  tags: configure

- name: Configure undercloud for containerized overcloud
  become: yes
  become_user: stack
  when: versions.rhosp >= 13
  tags: configure
  block:
    #TODO: Fix this task
    #- name: Add insecure registry to docker config
    #  become_user: root
    #  become: yes
    #  lineinfile:
    #    dest: /etc/sysconfig/docker
    #    state: present
    #    line: 'INSECURE_REGISTRY="--insecure-registry {{ director_provisioning_ip }}:8787 --insecure-registry {{ director_admin_apis_vip }}:8787 --insecure-registry {{ director_upstream_registry }}"'
    #    insertafter: "EOF"
    #  when: disconnected is defined
    #  tags: configure

    - name: Restart the docker service
      become_user: root
      become: yes
      service:
        name: docker
        state: restarted
        enabled: yes
      tags: configure

    - name: copy generate-container-prepare.sh script
      template:
        src: templates/generate-container-prepare.sh.j2
        dest: /home/stack/generate-container-prepare.sh
        owner: stack
        group: stack
        mode: 0775
      tags: configure
      when: versions.rhosp == 13

    - name: Pull the Docker images from a URL source
      shell: curl "{{ disconnected.docker.source }}" | gzip -d | sudo docker load
      async: 2700
      poll: 30
      tags: configure
      when: disconnected is defined and disconnected.docker is defined and versions.rhosp == 13

    - name: Set tags for Docker images
      shell: curl "{{ disconnected.docker.tag_file }}" | while read a b c; do sudo docker tag "$c" "$a:$b"; done
      async: 2700
      poll: 30
      tags: configure
      when: disconnected is defined and disconnected.docker is defined and versions.rhosp == 13

    - name: Push local images to local repository
      shell: for t in $(sudo docker images | sed '1d' | awk '/{{ rhosp_director.provisioning_ip | ipaddr('address') }}/ {print $1":"$2}'); do sudo docker push $t; done
      tags: configure
      when: disconnected is defined and disconnected.docker is defined and versions.rhosp == 13

    - name: Run script to pull the images to the local registry
      shell: source /home/stack/stackrc && sudo /home/stack/generate-container-prepare.sh
      args:
        chdir: /home/stack
      when: versions.rhosp == 13
      tags: configure

    - name: Pull the Docker images in to local registry
      shell: source /home/stack/stackrc && sudo openstack overcloud container image upload --config-file  /home/stack/local_registry_images.yaml --verbose
      args:
        chdir: /home/stack
      async: 2700
      poll: 30
      tags: configure
      when: versions.rhosp == 13

- name: Process local CA for undercloud SSL
  become: yes
  become_user: stack
  tags: configure
  when: ( director_generate_service_certificate is not defined ) or ( director_generate_service_certificate == true and versions.rhosp >= 13 )
  block:
    - name: Check to see if local ca file exists
      stat:
        path: "{{ director_local_ca_file | default('/etc/pki/ca-trust/source/anchors/cm-local-ca.pem') }}"
      register: stat_data
      tags: configure

    - name: Read in CA that is used to for Undercloud SSL services
      shell: /bin/awk 'BEGIN{display=0};/BEGIN CERTIFICATE/ {display=1}; (display==1) {print "        "$0}; /END CERTIFICATE/ {display=0};' "{{ director_local_ca_file | default('/etc/pki/ca-trust/source/anchors/cm-local-ca.pem') }}"
      when: stat_data.stat.exists
      register: ssl_ca_certificate
      tags: configure

    - name: Generate trust anchor environment file
      template:
        src: templates/inject-trust-anchor-hiera.yaml.j2
        dest: /home/stack/templates/inject-trust-anchor-hiera.yaml
        owner: stack
        group: stack
        mode: 0444
      when: stat_data.stat.exists
      tags: configure
