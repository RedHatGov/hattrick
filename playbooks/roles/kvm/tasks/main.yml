---
# tasks file for roles/kvm
- name: disable UseDNS in the /etc/ssh/sshd_config file
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^UseDNS"
    line: "UseDNS no"
    insertafter: EOF
    state: present
  register: ssh_config

#TODO: examine current dns dns server on the kvm host
#      keep that value, check it's validity. Set it to something useful

- name: reload ssh
  service:
    name: sshd
    state: reloaded
  when: ssh_config.changed

- name: enable SELinux
  selinux:
    policy: targeted
    state: enforcing

- name: turn off requiretty for sudo
  lineinfile:
    dest: /etc/sudoers
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
     - { line: "Defaults !requiretty", state: present }
     - { line: "Defaults requiretty", state: absent }

- name: check sudoers
  shell: cat /etc/sudoers | grep tty
  register: sudoers_output

- name: set hostname
  hostname:
    name: "{{ rhel_kvm.hostname_full }}"

#- name: remove any repo files
#  shell: rm -rf /etc/yum.repos.d/*.repo

#- name: enable the needed rhel repositories
#  yum_repository:
#    name: "{{ item }}"
#    description: "{{ item }}"
  #   baseurl: "{{ local_repo_url }}{{ item }}"
  #   gpgcheck: no
  #   enabled: yes
  #   file: rhn-local
  #   state: present
  # with_items:
  #   - "{{ rhel_kvm.repos }}"
  # when: not register_rhn

- name: check if virtualization extensions exist
  command: grep -E 'svm|vmx' /proc/cpuinfo
  register: virt_check
  failed_when: false

- name: clean yum cache
  command: yum clean all

- name: update packages
  yum:
    name: '*'
    state: latest
  register: yum_result
  async: 1000
  poll: 30

- name: check Kernel is the Latest
  shell: if [ $(uname -r) == $(rpm -q kernel | tail -n 1 | sed -e 's/kernel-//g') ] ; then echo no ; else echo reboot; fi
  ignore_errors: true
  register: reboot_hint

- name: install several useful utility and kvm packages
  yum:
    name: "{{ rhel_kvm.packages }}"
    state: latest

- name: copying kvm.conf file
  copy:
    src: files/kvm.conf
    dest: /etc/modprobe.d/kvm.conf
    owner: root
    group: root
    mode: 0644

- name: Stop libvirtd since it has a mount on a partition on the second disk
  service:
    name: libvirtd
    enabled: yes
    state: stopped

- name: unmount libvirt images
  mount:
    path: /var/lib/libvirt/images
    state: unmounted
  when: rhel_kvm.disks.libvirt_images is defined

- name: "read {{ rhel_kvm.disks.libvirt_images }} device information (always use unit when probing)"
  parted:
    device: "/dev/{{ rhel_kvm.disks.libvirt_images }}"
    unit: MiB
  register: libvirt_images_info
  when: rhel_kvm.disks.libvirt_images is defined

- name: "remove all partitions from {{ rhel_kvm.disks.libvirt_images }}"
  parted:
    device: "/dev/{{ rhel_kvm.disks.libvirt_images }}"
    number: "{{ item.num }}"
    state: absent
  with_items:
   - "{{ libvirt_images_info.partitions }}"
  ignore_errors: true
  when: rhel_kvm.disks.libvirt_images is defined

- name: "create 1 primary partition on {{ rhel_kvm.disks.libvirt_images }}"
  parted:
    device: "/dev/{{ rhel_kvm.disks.libvirt_images }}"
    number: 1
    state: present
    label: gpt
  when: rhel_kvm.disks.libvirt_images is defined

- name: "format {{ rhel_kvm.disks.libvirt_images }}1 xfs"
  filesystem:
    fstype: xfs
    dev: "/dev/{{ rhel_kvm.disks.libvirt_images }}1"
    force: "{{ rhel_kvm.disks.destructive_filesystem }}"
  when:
    - rhel_kvm.disks.libvirt_images is defined
    - rhel_kvm.disks.destructive_filesystem == "yes"

- name: "create 1 primary partition on {{ rhel_kvm.disks.libvirt_images }}"
  parted:
    device: "/dev/{{ rhel_kvm.disks.libvirt_images }}"
    number: 1
    state: present
    label: gpt
  when:
    - rhel_kvm.disks.libvirt_images is defined
    - rhel_kvm.disks.destructive_filesystem == "yes"

- name: "format {{ rhel_kvm.disks.libvirt_images }}1 xfs"
  filesystem:
    fstype: xfs
    dev: "/dev/{{ rhel_kvm.disks.libvirt_images }}1"
    force: "{{ rhel_kvm.disks.destructive_filesystem }}"
  when:
    - rhel_kvm.disks.libvirt_images is defined
    - rhel_kvm.disks.destructive_filesystem == "yes"

- name: "mount {{ rhel_kvm.disks.libvirt_images }}1 for libvirt images"
  mount:
    path: /var/lib/libvirt/images
    src: "/dev/{{ rhel_kvm.disks.libvirt_images }}1"
    fstype: xfs
    opts: defaults
    state: mounted
  when: rhel_kvm.disks.libvirt_images is defined

- name: starting libvirtd back up
  service:
    name: libvirtd
    enabled: yes
    state: started

#TODO: Revisit key generation and fetching
- name: generate ssh key for use across systems
  user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: /root/.ssh/id_rsa

- name: copy over ssh config
  copy:
    src: files/ssh_config
    dest: /root/.ssh/config

- name: fetch public key from KVM host
  fetch:
    src: /root/.ssh/id_rsa.pub
    dest: "{{ playbook_dir }}/files/kvm_root_id_rsa.pub"
    flat: yes

- name: copy over the rhel guest image for later virtual disk images
  copy:
    src: "/usr/share/rhel-guest-image-7/rhel-guest-image-7.2-20160302.0.x86_64.qcow2"
    dest: "/var/lib/libvirt/images/rhel-guest-image-7.qcow2"
    remote_src: true

- name: remove cloud-init and set root password on base rhel 7 guest image
  command: "virt-customize -a /var/lib/libvirt/images/rhel-guest-image-7.qcow2 --root-password password:redhat --run-command 'yum remove cloud-init* -y'"

- name: copy over ansible.cfg
  copy:
    src: "{{ playbook_dir }}/../../ansible.cfg"
    dest: /root/.ansible.cfg

- name: copy chrony.conf script for disconnected ntp master
  template:
    src: "templates/chrony.conf.j2"
    dest: /etc/chrony.conf
  when: disconnected is defined

- name: restarting chronyd service
  service:
    name: chronyd
    state: restarted
    enabled: yes
  when: disconnected is defined

- name: add NTP to firewalld
  firewalld:
    service: ntpd
    permanent: true
    state: enabled
    immediate: yes
  when: disconnected is defined
